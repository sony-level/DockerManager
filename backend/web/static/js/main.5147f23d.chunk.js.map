{"version":3,"sources":["components/NavBar.js","utilities/request.js","store/actions/container.action.js","store/schema/index.js","store/schema/stats.schema.js","store/schema/groups.schema.js","store/schema/container.schema.js","store/schema/image.schema.js","store/schema/cleanup.schema.js","store/reducers/cleanUp.reducer.js","store/reducers/index.js","store/reducers/stats.reducer.js","store/reducers/groups.reducer.js","store/reducers/container.reducer.js","store/reducers/image.reducer.js","store/index.js","store/actions/groups.action.js","components/groups/NewGroupForm.js","components/SecondaryNavBar.js","components/container/switch.js","components/container/selector.js","components/container/restartButton.js","components/container/stat.js","components/createdAt.js","components/container/card.js","components/container/lists.js","components/groups/GroupSwitch.js","components/groups/GroupDeleteButton.js","components/groups/GroupCard.js","components/groups/GroupsList.js","store/actions/stats.action.js","components/LogSideSheet.js","store/actions/image.action.js","components/container/deleteModal.js","pages/container.page.js","components/image/imageCard.js","components/Loader.js","components/image/imageLists.js","pages/image.page.js","store/actions/cleanUp.action.js","components/cleanup/cleanupSubNav.js","components/cleanup/cleanUpInfo.js","pages/cleanup.page.js","routes.js","index.js"],"names":["NavBar","state","active","path","this","props","location","pathname","setState","replace","name","icon","Text","display","alignItems","Icon","size","color","marginRight","Pane","justifyContent","padding","background","Button","height","width","fontSize","borderTopRightRadius","appearance","borderBottomRightRadius","is","Link","to","onClick","borderTopLeftRadius","borderBottomLeftRadius","React","PureComponent","withRouter","restPath","request","method","data","options","url","timeout","axios","genericContainer","payload","type","updateContainer","updateContainerLog","getContainers","status","dispatch","loading","pageError","segment","activeIndex","containerListLoading","then","response","containers","catch","error","toggleContainer","container","hideToaster","containerId","shortId","stateToggling","res","State","Running","toaster","success","Name","duration","ex","warning","restartContainer","deleteContainer","command","getState","showModal","selectedContainer","getLog","isShowingSideSheet","logData","resetLogSideSheet","toggleDeleteModal","stats","containerStats","isLive","groups","selectedItems","showGroupsPage","showNewGroupForm","newGroupName","createFormLoading","groupListLoading","groupsRunning","groupsSwitchDisabled","image","images","selectedImage","cleanup","segmentOptions","label","value","message","selectedSegment","responseData","apiCallStarted","appReducer","combineReducers","action","map","c","filter","ID","imageId","find","segmentValue","middlewares","thunk","store","createStore","schema","applyMiddleware","genericGroups","groupItemSelector","itemID","includes","modifiedListOfItems","items","groupStatusUpdater","groupSchemaProperty","groupIndex","add","newItems","createGroup","setTimeout","getGroups","deleteGroup","groupId","id","NewGroupForm","toggleLink","TextInput","placeholder","flexGrow","onChange","e","target","marginTop","style","marginLeft","intent","disabled","length","isLoading","preventDefault","handleSubmit","connect","bindActionCreators","SecondaryNavBar","SegmentedControl","Spinner","iconBefore","paddingLeft","paddingRight","groupForm","isBack","newGroupButton","containerFilters","backgroundColor","groupsToggler","renderBody","ContainerSwitch","Switch","checked","ContainerSelector","Checkbox","marginBottom","ContainerRestartButton","ContainerStat","memory","split","memoryFormated","trim","Number","toFixed","containerID","n","Badge","fontWeight","borderRadius","cpu_percentage","getMemoryUsage","memory_usage","network_io","renderBadges","TimeAgo","locale","en","timeAgo","CreatedAt","twitterStyleTime","format","Date","time","ContainerCard","showStatsInNewLine","renderStats","index","noHoverStyle","cardName","showColumn","flexDirection","border","className","onMouseEnter","Heading","Created","renderInfo","actionButtons","ContainersList","key","GroupSwitch","runningContainers","isRunning","runningStatus","toggleAllContainers","GroupDeleteButton","deleteModal","groupName","ReactDOM","createPortal","Dialog","isShown","title","hasHeader","onConfirm","onCloseComplete","confirmLabel","document","body","renderDeleteModal","GroupCard","group","groupContainers","JSON","parse","containers_id","filterContainers","GroupsList","renderGroupsList","genericStats","getContainersStat","console","log","LogSideSheet","SideSheet","containerProps","flex","zIndex","flexShrink","elevation","Paragraph","overflowY","Pre","genericImage","runImage","removeImage","getImages","runImageToContainer","deleteImage","danger","toggleImageDeleteModal","modalRoot","getElementById","Modal","el","createElement","handleDelete","bind","appendChild","removeChild","toggleModal","Component","ContainerPage","setInterval","ImageCard","Repository","Tag","Size","CreatedSince","Loader","spinner","marginX","marginY","ImageList","ImagePage","executePrune","setSelectedCleanUpSegment","pruneCommand","CleanUpNavBar","CleanUpInfo","CleanUpPage","Routes","Fragment","exact","component","CleanupPage","render"],"mappings":"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","file":"static/js/main.5147f23d.chunk.js","sourcesContent":["import React from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport { Pane, Icon, Text, Button } from 'evergreen-ui'\n\n\nclass NavBar extends React.PureComponent {\n\n  state = {\n    active: 'container'\n  }\n\n  componentDidMount () {\n    let path = this.props.location.pathname\n    if( path === '/' ) path = 'containers'\n    this.setState({\n      active: path.replace('/', '')\n    })\n  }\n\n  navButton (name, icon) {\n    return <Text display='flex' alignItems='center'>\n      <Icon size={14} color=\"muted\" icon={ icon } marginRight={5}/> \n        { name }\n    </Text>\n  }\n\n  render () {\n    const { active } = this.state\n    return <Pane display=\"flex\" justifyContent=\"center\" padding={26} background=\"#f9f9fc\">\n      <Button \n        height={48} \n        width={250} \n        justifyContent='center' \n        alignItems='center'\n        fontSize={14} \n        borderTopRightRadius={0} \n        appearance={active === 'containers' ? 'primary' : 'default'}\n        borderBottomRightRadius={0}\n        is={Link}\n        to='/'\n        onClick={() => this.setState({active: 'containers'})}>\n          <Icon icon=\"layers\" marginRight={5} size={14} /> Container\n        </Button>\n      <Button \n        height={48} \n        width={250} \n        justifyContent='center' \n        alignItems='center'\n        fontSize={14} \n        borderTopLeftRadius={0} \n        borderBottomLeftRadius={0} \n        borderTopRightRadius={0} \n        appearance={active === 'images' ? 'primary' : 'default'}\n        borderBottomRightRadius={0} \n        is={Link}\n        to='/images'\n        onClick={() => this.setState({active: 'images'})}>\n          <Icon icon=\"projects\" marginRight={5} size={14} /> Image\n        </Button>\n      <Button \n        height={48} \n        width={250} \n        justifyContent='center' \n        alignItems='center'\n        fontSize={14} \n        borderTopLeftRadius={0} \n        appearance=\"default\"\n        borderBottomLeftRadius={0} \n        appearance={active === 'cleanup' ? 'primary' : 'default'}\n        is={Link}\n        to='/cleanup'\n        onClick={() => this.setState({active: 'cleanup'})}>\n          <Icon icon=\"shield\" marginRight={5} size={14} /> Clean-up\n        </Button>\n    </Pane>\n  }\n}\n\nexport default withRouter(NavBar)","import axios from 'axios'\nexport const restPath = 'http://localhost:3230/api/'\n\nexport const request = ( method, path, data = {} ) => {\n  const options = {\n    method,\n    data,\n    url: restPath + path,\n    timeout: 50000,\n  }\n  return axios(options)\n}","import { request } from '../../utilities/request'\nimport { toaster } from 'evergreen-ui'\n\nexport const genericContainer = payload => ({\n  type: 'GENERIC_CONTAINER',\n  payload\n})\n\nexport const updateContainer = payload => ({\n  type: 'UPDATE_CONTAINER',\n  payload\n})\n\nexport const removeContainer = payload => ({\n  type: 'DELETE_CONTAINER',\n  payload\n})\n\nexport const updateContainerLog = payload => ({\n  type: 'UPDATE_LOG',\n  payload\n})\n\nexport const toggleModal = payload => ({\n  type: 'TOGGLE_MODAL',\n  payload\n})\n\nexport const getContainers = (status = 'active') => {\n  return dispatch => {\n    dispatch(genericContainer({\n      loading: status,\n      pageError: false,\n      segment: status,\n      activeIndex: 0,\n      containerListLoading: true,\n    }))\n    request('get', `container/fetch?status=${status}`, {})\n      .then(response => {\n        dispatch(genericContainer({\n          loading: false,\n          containers: response.data,\n          pageError: false,\n          containerListLoading: false,\n        }))\n      }).catch(error => {\n        dispatch(genericContainer({\n          loading: false,\n          pageError: true,\n          containerListLoading: false,\n        }))\n      })\n  }\n}\n\nexport const toggleContainer = (container, status, hideToaster) => {\n  return dispatch => {\n    dispatch(updateContainer({\n      containerId: container.shortId,\n      data: { stateToggling: true },\n    }))\n    request('get', `container/command?container=${container.shortId}&command=${status}`)\n      .then(res => {\n        const State = {\n          ...container.State,\n          ...{\n            Running: status === 'start'\n              ? true\n              : false\n          }\n        }\n        dispatch(updateContainer({\n          containerId: container.shortId,\n          data: { \n            State,\n            stateToggling: false,\n          },\n        }))\n        if(! !!hideToaster) {\n          toaster.success(\n            `Container ${container.Name} has been ${status === 'start'? 'started' : 'stopped'}.`,\n            { duration: 5 }\n          )\n        }\n      })\n      .catch( ex => {\n        dispatch(updateContainer({\n          containerId: container.shortId,\n          data: { stateToggling: false },\n        }))\n        toaster.warning(`There is problem ${status === 'start'? 'starting' : 'stopping'} container ${container.Name}`,{duration: 5})\n      })\n  }\n}\n\nexport const restartContainer = (container, status) => {\n  return dispatch => {\n    dispatch(updateContainer({\n      containerId: container.shortId,\n      data: { \n        stateToggling: true,\n        State: {\n          ...container.State,\n          ...{\n            Running: false\n          }\n        }\n      },\n    }))\n    request('get', `container/command?container=${container.shortId}&command=${status}`)\n      .then(res => {\n        dispatch(updateContainer({\n          containerId: container.shortId,\n          data: { \n            State: {\n              ...container.State,\n              ...{\n                Running: true\n              }\n            },\n            stateToggling: false,\n          },\n        }))\n        toaster.success(`Container ${container.Name} has been restarted.`,{ duration: 5 })\n      })\n      .catch( ex => {\n        dispatch(updateContainer({\n          containerId: container.shortId,\n          data: { \n            State: {\n              ...container.State,\n              ...{\n                Running: false\n              }\n            },\n            stateToggling: false,\n          },\n        }))\n        toaster.warning(`There is problem restarting container ${container.Name}`,{duration: 5})\n      })\n  }\n}\n\nexport const deleteContainer = (container, command) => (dispatch, getState)=>{\n    request('get', `container/command?container=${container.shortId}&command=${command}`)\n      .then(res => {\n        dispatch(removeContainer({\n          containerId: container.shortId,\n          showModal: !getState().container.showModal,\n          selectedContainer: {}\n        }))\n        toaster.success(\n          `Container ${container.Name} is no more!!!.`,\n          {\n            duration: 5\n          }\n        )\n      })  \n}\n\nexport const getLog = (container) => {\n  return dispatch => {\n    dispatch(updateContainerLog({\n      container: container,\n      isShowingSideSheet: false,\n    }))\n    request('get', `container/logs?container=${container.shortId}`)\n      .then(response => {\n        dispatch(updateContainerLog({\n          container: container,\n          isShowingSideSheet: true,\n          logData: response.data\n        }))\n      })\n  }\n}\n\nexport const resetLogSideSheet = () => (dispatch, getState)=>{\n  dispatch(updateContainerLog({\n    isShowingSideSheet: !getState().container.isShowingSideSheet,\n  }))\n}\n\nexport const toggleDeleteModal = (container) => (dispatch, getState)=>{\n  dispatch(toggleModal({\n    showModal: !getState().container.showModal,\n    selectedContainer: container ? container : {}\n  }))\n}","import stats from './stats.schema'\nimport groups from './groups.schema'\nimport container from './container.schema'\nimport image from './image.schema'\nimport cleanup from './cleanup.schema'\n\nexport default {\n  stats,\n  groups,\n  container,\n  image,\n  cleanup\n}","export default {\n  containerStats: [],\n  isLive: false,\n}","export default {\n  groups: [],\n  selectedItems: [],\n  showGroupsPage: false,\n  showNewGroupForm: false,\n  activeIndex: 0,\n  newGroupName: '',\n  createFormLoading: false,\n  groupListLoading: true,\n  groupsRunning: [],\n  groupsSwitchDisabled: [],\n}","export default {\n  containers: [],\n  loading: false,\n  containerListLoading: true,\n  pageError: false,\n  segment: 'active',\n  activeIndex: 0,\n  isShowingSideSheet: false,\n  logData: {},\n  showModal: false,\n  selectedContainer: {}\n}","export default {\n   images: [],\n   loading: false,\n   pageError: false,\n   activeIndex: 0,\n   isShowingSideSheet: false,\n   logData: {},\n   showModal: false,\n   selectedImage: {}\n }","export default {\n   segmentOptions: [\n      { label: 'Prune Images', value: 'image', message: 'This action will allow you to clean up unused images. It cleans up dangling images. A dangling image is one that is not tagged and is not referenced by any container.' },\n      { label: 'Prune Containers', value: 'container', message: 'When you stop a container, it is not automatically removed unless you started it with the --rm flag. A stopped container’s writable layers still take up disk space.' },\n      { label: 'Prune Volumes', value: 'volume', message: 'Volumes can be used by one or more containers, and take up space on the Docker host. Volumes are never removed automatically, because to do so could destroy data.' },\n      { label: 'Prune System', value: 'system', message: 'Remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes.' }\n    ],\n   selectedSegment: { label: 'Prune Images', value: 'image', message: 'This action will allow you to clean up unused images. It cleans up dangling images. A dangling image is one that is not tagged and is not referenced by any container.' },\n   responseData: {},\n   isShowingSideSheet: false,\n   apiCallStarted: false\n }","export default (state = null, action) => {\n\n   switch (action.type) {\n \n     case 'SELECTED_SEGMENT':\n       return {\n         ...state,\n         ...{\n            selectedSegment: state.segmentOptions.find(c => {\n              return c.value === action.payload.segmentValue\n            })\n          }\n       }\n      \n      case 'EXECUTE_PRUNE':\n       return {\n         ...state,\n         ...{\n            isShowingSideSheet: action.payload.isShowingSideSheet,\n            responseData: action.payload.responseData ? {\n              data: action.payload.responseData\n            } : {},\n            apiCallStarted: action.payload.apiCallStarted\n          }\n       }\n       \n     default:\n       return state\n \n   }\n }","import { combineReducers } from 'redux'\n\nimport stats from './stats.reducer'\nimport groups from './groups.reducer'\nimport container from './container.reducer'\nimport image from './image.reducer'\nimport cleanup from './cleanUp.reducer'\n\nconst appReducer = combineReducers({\n  stats,\n  groups,\n  container,\n  image,\n  cleanup\n})\n\nexport default (state, action) => {\n  return appReducer(state, action)\n}","export default (state = null, action) => {\n\n  switch (action.type) {\n\n    case 'GENERIC_STATS':\n      return {\n        ...state,\n        ...action.payload\n      }\n      \n    default:\n      return state\n\n  }\n}","export default (state = null, action) => {\n\n  switch (action.type) {\n\n    case 'GENERIC_GROUPS':\n      return {\n        ...state,\n        ...action.payload\n      }\n      \n    default:\n      return state\n\n  }\n}","export default (state = null, action) => {\n\n  switch (action.type) {\n\n    case 'GENERIC_CONTAINER':\n      return {\n        ...state,\n        ...action.payload\n      }\n\n    case 'UPDATE_CONTAINER':\n      return {\n        ...state,\n        ...{\n          containers: state.containers.map(c => {\n            if(c.shortId == action.payload.containerId) {\n              return {\n                ...c,\n                ...action.payload.data\n              }\n            } else {\n              return c\n            }\n          })\n        }\n      }\n    \n    case 'DELETE_CONTAINER':\n      return {\n        ...state,\n        ...{\n          containers: state.containers.filter(c => {\n            return c.shortId !== action.payload.containerId\n          },\n          ),\n          showModal: action.payload.showModal,\n          selectedContainer: action.payload.selectedContainer\n        }\n      }\n\n    case 'UPDATE_LOG':\n      return {\n        ...state,\n        ...{\n          logData: action.payload.logData && action.payload.container ? {\n            container: action.payload.container ,\n            data:  action.payload.logData\n          } : {},\n          isShowingSideSheet: action.payload.isShowingSideSheet\n        }\n      }\n    \n    case 'TOGGLE_MODAL':\n      return {\n        ...state,\n        ...{\n          showModal: action.payload.showModal,\n          selectedContainer: action.payload.selectedContainer\n        }\n      }\n      \n    default:\n      return state\n\n  }\n}","export default (state = null, action) => {\n\n   switch (action.type) {\n \n     case 'GENERIC_IMAGE':\n       return {\n         ...state,\n         ...action.payload\n       }\n\n     case 'RUN_IMAGE':\n       return {\n         ...state,\n         ...{\n          images: state.images.map(c => {\n            if(c.ID == action.payload.imageId) {\n              return {\n                ...c,\n                ...action.payload.data\n              }\n            } else {\n              return c\n            }\n          })\n        }\n       }\n\n     case 'DELETE_IMAGE':\n       return {\n         ...state,\n         ...{\n           images: state.images.filter(c => {\n            if(action.payload.imageId) {\n              return c.ID !== action.payload.imageId\n            } else {\n              return c\n            }\n           }),\n           showModal: action.payload.showModal,\n           selectedImage: action.payload.selectedImage\n         }\n       }\n \n     case 'TOGGLE_IMAGE_MODAL':\n       return {\n         ...state,\n         ...{\n           showModal: action.payload.showModal,\n           selectedImage: action.payload.selectedImage\n         }\n       }\n       \n     default:\n       return state\n \n   }\n }","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport schema from './schema'\nimport rootReducer from './reducers'\nconst middlewares = [thunk]\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  const { createLogger } = require('redux-logger')\n  const logger = createLogger({\n    collapsed: true,\n  })\n  middlewares.push(logger)\n}\n\nexport const store = createStore(\n  rootReducer,\n  schema, // Initial data.\n  applyMiddleware(...middlewares)\n)","import { store } from '../'\nimport { request } from '../../utilities/request'\n\nexport const genericGroups = payload => ({\n  type: 'GENERIC_GROUPS',\n  payload\n})\n\nexport const groupItemSelector = itemID => {\n  return dispatch => {\n    const selectedItems = store.getState().groups.selectedItems\n    if(selectedItems.includes(itemID)) {\n      // Remove item.\n      const modifiedListOfItems = selectedItems.filter(value => value != itemID)\n      dispatch(genericGroups({\n        selectedItems: modifiedListOfItems,\n      }))\n    } else {\n      // Add item.\n      const items = [\n        ...selectedItems,\n        itemID\n      ]\n      dispatch(genericGroups({\n        selectedItems: items\n      }))\n    }\n  }\n}\n\nexport const groupStatusUpdater = (groupSchemaProperty, groupIndex, add) => {\n  return dispatch => {\n    const items = store.getState().groups[groupSchemaProperty]\n    if(add) {\n      // Remove the group index.\n      const newItems = items.filter(value => value != groupIndex)\n      dispatch(genericGroups({\n        [groupSchemaProperty]: newItems\n      }))\n    } else {\n      // Add the group index.\n      const newItems = [\n        ...items,\n        groupIndex\n      ]\n      dispatch(genericGroups({\n        [groupSchemaProperty]: newItems\n      }))\n    }\n  }\n}\n\nexport const createGroup = data => {\n  return dispatch => {\n    dispatch(genericGroups({ createFormLoading: true }))\n    request('post', 'groups', {name: data.newGroupName, containers: data.selectedItems})\n      .then(res => {\n        setTimeout(() => {\n          dispatch(genericGroups({ \n            newGroupName: '',\n            selectedItems: [],\n            showGroupsPage: true,\n            showNewGroupForm: false,\n            createFormLoading: false,\n          }))\n        }, 1200)\n      })\n  }\n}\n\nexport const getGroups = () => {\n  return dispatch => {\n    dispatch(genericGroups({\n      groupListLoading: true,\n    }))\n    request('get', 'groups', {})\n      .then(res => {\n        dispatch(genericGroups({\n          groups: res.data,\n          groupListLoading: false,\n        }))\n      })\n  }\n}\n\nexport const deleteGroup = groupId => {\n  return dispatch => {\n    request('delete', 'groups', {id: groupId})\n      .then(res => {\n        dispatch(getGroups())\n      })\n  }\n}","import React from 'react'\nimport { Pane, Button, TextInput, IconButton } from 'evergreen-ui'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { genericGroups, createGroup } from '../../store/actions/groups.action'\n\nclass NewGroupForm extends React.PureComponent {\n\n  state = {\n    toggleLink: false,\n  }\n\n  handleSubmit () {\n    const { createGroup, newGroupName, selectedItems } = this.props\n    createGroup({newGroupName, selectedItems})\n  }\n\n  render () {\n    const { selectedItems, newGroupName, genericGroups, createFormLoading } = this.props\n    return <Pane \n      display='flex'\n      justifyContent='center'\n      alignItems='center'>\n        <Pane>\n          <TextInput\n            name=\"text-input-name\"\n            placeholder=\"New Group Name\"\n            height={26}\n            display='flex'\n            flexGrow={1}\n            onChange={e => {\n              genericGroups({\n                newGroupName: e.target.value\n              })\n            }}\n            value={newGroupName}\n          />\n          {\n            this.state.toggleLink && <TextInput\n              name=\"text-input-name\"\n              placeholder=\"URL of the application\"\n              height={26}\n              marginTop={6}\n              display='flex'\n              flexGrow={1}\n              onChange={e => {\n                genericGroups({\n                  newGroupName: e.target.value\n                })\n              }}\n              value={newGroupName}\n            />\n          }\n        </Pane>\n        <Pane display=\"flex\" style={{height: '100%'}}>\n          {/*<IconButton \n            icon=\"link\" \n            height={26} \n            marginLeft={6} \n            onClick={e => {\n              e.preventDefault()\n              this.setState({\n                toggleLink: !this.state.toggleLink\n              })\n            }}\n          />\n          */}\n          <Button\n            height={26}\n            appearance=\"primary\"\n            marginLeft={6}\n            intent=\"success\"\n            disabled={(selectedItems.length <= 0) || (newGroupName === '')}\n            isLoading={createFormLoading}\n            onClick={(e) => {\n              e.preventDefault()\n              this.handleSubmit()\n            }}\n          >\n            Create Group\n          </Button>\n        </Pane>\n    </Pane>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    newGroupName: state.groups.newGroupName,\n    selectedItems: state.groups.selectedItems,\n    createFormLoading: state.groups.createFormLoading,\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    createGroup,\n    genericGroups,\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( NewGroupForm )","import React from 'react'\nimport { Pane, Spinner, SegmentedControl, Button } from 'evergreen-ui'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { getContainers } from '../store/actions/container.action'\nimport { genericGroups } from '../store/actions/groups.action'\n\nimport NewGroupForm from './groups/NewGroupForm'\n\nclass SecondaryNavBar extends React.PureComponent {\n\n  containerFilters () {\n    const { loading, segment, getContainers } = this.props\n    return <SegmentedControl\n      width={400}\n      height={26}\n      options={[\n        { label: loading === 'all' ? <Spinner size={16} /> : 'All', value: 'all' },\n        { label: loading === 'active' ? <Spinner size={16} /> : 'Active', value: 'active' },\n        { label: loading === 'stopped' ? <Spinner size={16} /> : 'Stopped', value: 'stopped' }\n      ]}\n      value={segment}\n      onChange={value => {\n        getContainers(value)\n      }}\n    />\n  }\n\n  newGroupButton () {\n    const { showNewGroupForm, genericGroups, getContainers } = this.props\n    return <Button \n      marginRight={12} \n      iconBefore='add'\n      paddingLeft={35}\n      paddingRight={30}\n      height={26}\n      onClick={() => {\n        const groupForm = !showNewGroupForm\n        genericGroups({\n          showGroupsPage: false,\n          showNewGroupForm: groupForm,\n        })\n        if(groupForm) {\n          getContainers('all')\n        }\n      }}>Create New Group</Button>\n  }\n\n  groupsToggler () {\n    const { genericGroups, showGroupsPage, showNewGroupForm } = this.props\n    const isBack = showGroupsPage || showNewGroupForm\n    return <Button \n      marginRight={12} \n      iconBefore={isBack ? 'chevron-left' : 'tag'}\n      paddingLeft={35}\n      paddingRight={30}\n      height={26}\n      onClick={() => {\n        genericGroups({ \n          showGroupsPage: !showGroupsPage,\n          showNewGroupForm: false,\n        })\n      }}>\n        {isBack ? 'Back' : 'Groups'}\n    </Button>\n  }\n\n  renderBody () {\n    const { showNewGroupForm, showGroupsPage } = this.props\n    if(showNewGroupForm) {\n      return <NewGroupForm />\n    } else if (showGroupsPage) {\n      return this.newGroupButton()\n    } else {\n      return this.containerFilters()\n    }\n  }\n\n  render() {\n    return <Pane \n      backgroundColor=\"#f1f1f1\" \n      display=\"flex\" \n      justifyContent=\"center\"\n      padding={10}>\n        {this.groupsToggler()}\n        {this.renderBody()}\n      </Pane>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    segment: state.container.segment,\n    loading: state.container.loading,\n    showGroupsPage: state.groups.showGroupsPage,\n    showNewGroupForm: state.groups.showNewGroupForm,\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    getContainers,\n    genericGroups,\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( SecondaryNavBar )","import React from 'react'\nimport { Switch } from 'evergreen-ui'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { toggleContainer } from '../../store/actions/container.action'\n\nclass ContainerSwitch extends React.PureComponent {\n  render () {\n    const { container, toggleContainer } = this.props\n    const command = container.State.Running\n      ? 'stop'\n      : 'start'\n    const disabled = !!container.stateToggling\n    return <Switch \n      marginRight={10} \n      height={18} \n      marginTop={2}\n      checked={container.State.Running} \n      disabled={disabled}\n      onChange={() => {\n        toggleContainer(container, command)\n      }}\n    />\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    toggleContainer\n  },\n  dispatch\n)\n\nexport default connect(null, mapDispatchToProps)( ContainerSwitch )","import React from 'react'\nimport { Checkbox } from 'evergreen-ui'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { groupItemSelector } from '../../store/actions/groups.action'\n\nclass ContainerSelector extends React.PureComponent {\n\n  render () {\n    const { groupItemSelector, selectedItems } = this.props\n    const shortId = this.props.container.shortId\n    const checked = selectedItems.includes(shortId)\n    return <Checkbox \n      marginRight={15}\n      marginTop={0}\n      marginBottom={0}\n      checked={checked}\n      onChange={() => {\n        groupItemSelector(shortId)\n      }}\n    />\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedItems: state.groups.selectedItems,\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    groupItemSelector\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( ContainerSelector )","import React from 'react'\nimport { Button } from 'evergreen-ui'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { restartContainer } from '../../store/actions/container.action'\n\nclass ContainerRestartButton extends React.PureComponent {\n  render () {\n    const { container, restartContainer } = this.props\n    const disabled = !!container.stateToggling\n    return <Button \n      marginRight={5} \n      height={22} \n      iconBefore=\"refresh\"\n      disabled={disabled}\n      onClick={() => {\n        restartContainer(container, 'restart')\n      }}\n      >\n        Restart\n    </Button>\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    restartContainer\n  },\n  dispatch\n)\n\nexport default connect(null, mapDispatchToProps)( ContainerRestartButton )","import React from 'react'\nimport { Badge } from 'evergreen-ui'\nimport { connect } from 'react-redux'\n\n\nclass ContainerStat extends React.PureComponent {\n  \n  getMemoryUsage(memory) {\n    [memory] = memory.split('/')\n    let memoryFormated = memory.replace(/[a-zA-Z]/g, '').trim()\n    return Number(memoryFormated).toFixed(1) + 'mb'\n  }\n\n  renderBadges () {\n    const { stats, containerID } = this.props\n    const data = stats\n      .find(n => n.id === containerID)\n    return data \n      ? <>\n        <Badge backgroundColor=\"#deebf7\" fontWeight=\"bold\" borderRadius={16} paddingLeft={10} fontSize={11} paddingRight={10} marginLeft={10} marginTop={3}>\n          cpu {data.cpu_percentage}\n        </Badge>\n        <Badge backgroundColor=\"#ebe7f8\" fontWeight=\"bold\" borderRadius={16} paddingLeft={10} fontSize={11} paddingRight={10} marginLeft={10} marginTop={3}>\n          ram {this.getMemoryUsage(data.memory_usage)}\n        </Badge>\n        <Badge backgroundColor=\"#ebe7f8\" fontWeight=\"bold\" borderRadius={16} paddingLeft={10} fontSize={11} paddingRight={10} marginLeft={10} marginTop={3}>\n          net {this.getMemoryUsage(data.network_io)}\n        </Badge>\n      </>\n      : null\n  }\n\n  render () {\n    return this.renderBadges()\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    stats: state.stats.containerStats\n  }\n}\n\nexport default connect(mapStateToProps, null)( ContainerStat )","import React from 'react'\nimport { Badge } from 'evergreen-ui'\n\nimport TimeAgo from 'javascript-time-ago'\nimport en from 'javascript-time-ago/locale/en'\nTimeAgo.locale(en)\nconst timeAgo = new TimeAgo('en-US')\n\nconst CreatedAt = props => {\n  const twitterStyleTime = timeAgo.format(new Date(props.time), 'twitter')\n  return <Badge backgroundColor=\"#d4eee3\" fontWeight=\"bold\" borderRadius={16} paddingLeft={10} fontSize={11} paddingRight={10} marginLeft={10} marginTop={3}>\n    {twitterStyleTime.trim() === '' ? 'now' : twitterStyleTime}\n  </Badge>\n}\n\nexport default CreatedAt","import React from 'react'\nimport { Pane, Button, Heading, Badge } from 'evergreen-ui'\nimport './style/card.css'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { genericContainer, getLog, toggleDeleteModal } from '../../store/actions/container.action'\n\nimport ContainerSwitch from './switch'\nimport ContainerSelector from './selector'\nimport ContainerRestart from './restartButton'\nimport ContainerStat from './stat'\nimport CreatedAt from '../createdAt'\n\nclass ContainerCard extends React.PureComponent {\n\n  actionButtons (active) {\n    const { container, showNewGroupForm, toggleDeleteModal, getLog } = this.props\n    if(!showNewGroupForm) {\n      if(active) {\n        return <Pane display=\"flex\" marginTop={12} marginLeft={46}>\n          <ContainerRestart container={container} />\n          <Button marginRight={5} \n            height={22} \n            iconBefore=\"application\"\n            onClick={()=>{\n              getLog(container)\n            }}>Log</Button>\n          <Button marginRight={5} \n            height={22} \n            iconBefore=\"trash\" \n            disabled={container.State.Running}\n            onClick={() => {\n              toggleDeleteModal(container)\n            }}>\n            Delete\n          </Button>\n        </Pane>\n      } else {\n        return null\n      }\n    }\n  }\n\n  renderStats (container) {\n    const { showNewGroupForm } = this.props\n    if(!showNewGroupForm) {\n      if(container.State.Running) {\n        return <ContainerStat containerID={container.shortId} />\n      }\n    }\n  }\n\n  renderInfo (container) {\n    const { showStatsInNewLine } = this.props\n    const marginLeft = !!showStatsInNewLine ? 35:0\n    const marginTop = !!showStatsInNewLine ? 5:0\n    return <Pane display=\"flex\" marginLeft={marginLeft} marginTop={marginTop}>\n      { this.renderStats(container) }\n    </Pane>\n  }\n\n  render () {\n    const { container, activeIndex, genericContainer, index, showNewGroupForm, noHoverStyle, showStatsInNewLine } = this.props\n    const active = activeIndex == index\n    let cardName = 'element-card'\n    if(!noHoverStyle) {\n      if(active) {\n        cardName += ' card-active'\n      }\n    }\n    const showColumn = !!showStatsInNewLine ? 'column':'row'\n      return <Pane \n            display=\"flex\" \n            flexDirection=\"column\" \n            flexGrow={1}\n            padding={12}\n            borderRadius={6}\n            border=\"default\"\n            className={cardName}\n            onMouseEnter={() => genericContainer({\n              activeIndex: index\n            })}>\n        <Pane display=\"flex\" flexDirection={showColumn}>\n          <Pane display=\"flex\" alignItems=\"flex-start\">\n            {\n              showNewGroupForm\n                ? <ContainerSelector container={container} />\n                : <ContainerSwitch container={container} />\n            }\n            <Heading size={400}>{container.Name}</Heading>\n            <Badge \n              backgroundColor=\"#e7e9ef\" \n              fontWeight=\"bold\" \n              borderRadius={16} \n              paddingLeft={10} \n              fontSize={11} \n              paddingRight={10} \n              marginLeft={10} \n              marginTop={3}>{container.shortId}\n            </Badge>\n            <CreatedAt time={container.Created} />\n          </Pane>\n          { this.renderInfo(container) }\n        </Pane>\n        { this.actionButtons(active) }\n    </Pane>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    activeIndex: state.container.activeIndex,\n    showNewGroupForm: state.groups.showNewGroupForm,\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    genericContainer,\n    getLog,\n    toggleDeleteModal\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( ContainerCard )","import React from 'react'\nimport { Pane } from 'evergreen-ui'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { getContainers, toggleDeleteModal, resetLogSideSheet } from '../../store/actions/container.action'\n\nimport ContainerCard from './card'\n\nclass ContainersList extends React.PureComponent {\n\n  componentDidMount () {\n    this.props.getContainers(this.props.segment)\n  }\n\n  render () {\n    const { containers } = this.props\n    return <Pane \n      display=\"flex\" \n      flexDirection=\"column\" \n      justifyContent=\"center\" \n      alignItems=\"center\"\n      marginTop={20}>\n      \n        {\n          containers.map((container, index) => \n            <ContainerCard \n              key={index} \n              index={index} \n              container={container} \n            />\n          )\n        }\n    </Pane>\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    segment: state.container.segment,\n    containers: state.container.containers,\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    getContainers\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( ContainersList )","import React from 'react'\nimport { Switch } from 'evergreen-ui'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { groupStatusUpdater, genericGroups } from '../../store/actions/groups.action'\nimport { toggleContainer } from '../../store/actions/container.action'\n\nclass GroupSwitch extends React.PureComponent {\n\n  isRunning () {\n    const { containers } = this.props\n    const runningContainers = containers.filter(c => c.State.Running === true)\n    return containers.length === runningContainers.length\n  }\n\n  isLoading () {\n    const { containers } = this.props\n    const loadingContainers = containers.filter(c => !!c.stateToggling)\n    return loadingContainers === 0\n  }\n\n  toggleAllContainers () {\n    const { containers, toggleContainer, genericGroups, groupIndex } = this.props\n    const isRunning = this.isRunning()\n    const command = isRunning\n      ? 'stop'\n      : 'start'\n    genericGroups({\n      activeIndex: groupIndex\n    })\n    containers.map(container => {\n      toggleContainer(container, command, true)\n    })\n  }\n\n  render () {\n    const runningStatus = this.isRunning()\n    return <Switch \n      marginRight={10} \n      height={22} \n      marginTop={2}\n      checked={runningStatus} \n      disabled={this.isLoading()}\n      onChange={() => {\n        this.toggleAllContainers()\n      }}\n    />\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    activeIndex: state.groups.activeIndex,\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    genericGroups,\n    toggleContainer,\n    groupStatusUpdater,\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( GroupSwitch )","import React from 'react'\nimport { Button, Dialog, Heading, Badge } from 'evergreen-ui'\nimport ReactDOM from 'react-dom'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { deleteGroup } from '../../store/actions/groups.action'\n\nclass GroupDeleteButton extends React.PureComponent {\n\n  state = {\n    deleteModal: false,\n  }\n\n  renderDeleteModal () {\n    const { groupName, groupId, deleteGroup } = this.props\n    if(this.state.deleteModal) {\n      return ReactDOM.createPortal(\n        <Dialog\n          isShown={this.state.deleteModal}\n          title=\"Confirmation\"\n          hasHeader={false}\n          intent=\"danger\"\n          onConfirm={() => {\n            deleteGroup(groupId)\n            this.setState({\n              deleteModal: false,\n            })\n          }}\n          onCloseComplete={() => this.setState({ deleteModal: false })}\n          confirmLabel=\"Confirm\"\n        >\n          <Heading size={500} marginTop=\"default\" marginBottom=\"default\">\n            Are you sure you want to delete <Badge color=\"neutral\">{groupName}</Badge> container group?\n          </Heading>\n        </Dialog>,\n        document.body\n      )\n    } else {\n      return null\n    }\n  }\n\n  render () {\n    return <>\n      <Button marginRight={5} \n        height={22} \n        iconBefore=\"trash\"\n        onClick={() => {\n          this.setState({\n            deleteModal: !this.state.deleteModal\n          })\n        }}>\n        Delete Group\n      </Button>\n      {this.renderDeleteModal()}\n    </>\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    deleteGroup,\n  },\n  dispatch\n)\n\nexport default connect(null, mapDispatchToProps)( GroupDeleteButton )","import React from 'react'\nimport { Pane, Button, Heading, Badge } from 'evergreen-ui'\nimport './style/GroupCard.css'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { genericGroups } from '../../store/actions/groups.action'\n\nimport ContainerCard from '../container/card'\nimport GroupSwitch from '../groups/GroupSwitch'\nimport GroupDeleteButton from './GroupDeleteButton'\n\nclass GroupCard extends React.PureComponent {\n\n  filterContainers () {\n    const { group, containers } = this.props\n    const groupContainers = JSON.parse(group.containers_id)\n    const filteredContainers = containers.filter(container => groupContainers.includes(container.shortId))\n    return filteredContainers\n  }\n\n  render () {\n    const { group, genericGroups, index, activeIndex } = this.props\n    const containers = this.filterContainers()\n    if(containers.length <= 0) return null\n    const active = activeIndex == index\n      return <Pane \n        display=\"flex\" \n        flexDirection=\"column\" \n        flexGrow={1}\n        padding={12}\n        borderRadius={6}\n        marginBottom={16}\n        border=\"default\"\n        className=\"element-card card-active\"\n        >\n          <Pane display=\"flex\" flexGrow={1} alignItems=\"center\">\n            <Pane display=\"flex\" flexGrow={1} justifyContent=\"center\" alignItems=\"center\">\n              <GroupSwitch \n                containers={containers} \n                groupIndex={index}/>\n              <Heading \n                display=\"flex\" \n                alignItems=\"center\" \n                className=\"groupOptToggler\"\n                onClick={() => genericGroups({\n                  activeIndex: index\n                })}\n                size={600}>{group.name} \n                <Badge\n                  marginLeft={6}>{containers.length}</Badge>\n              </Heading>\n              <Pane display=\"flex\" flexGrow={1} justifyContent=\"flex-end\">\n                <GroupDeleteButton groupName={group.name} groupId={group.id} />\n              </Pane>\n            </Pane>\n          </Pane>\n          {\n            active && <Pane marginLeft={30} marginTop={10}>\n              <Heading size={400} marginLeft={14} marginTop={10} color=\"#999\">All Containers</Heading>\n              {\n                containers.map((container, index) => {\n                  return <ContainerCard\n                    key={index} \n                    index={index} \n                    container={container}\n                    noHoverStyle \n                    showStatsInNewLine\n                  />\n                })\n              }\n            </Pane>\n          }\n\n    </Pane>\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    containers: state.container.containers,\n    activeIndex: state.groups.activeIndex,\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    genericGroups,\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( GroupCard )","import React from 'react'\nimport { Pane, Heading } from 'evergreen-ui'\n\nimport GroupCard from './GroupCard'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { getContainers } from '../../store/actions/container.action'\nimport { getGroups } from '../../store/actions/groups.action'\n\nclass GroupsList extends React.PureComponent {\n\n  componentDidMount () {\n    const { getGroups, getContainers } = this.props\n    getGroups()\n    getContainers('all')\n  }\n\n  renderGroupsList () {\n    const { groups, groupListLoading, containerListLoading } = this.props\n    if( groupListLoading && containerListLoading ) {\n      return <Heading size={600}>Please wait</Heading>\n    }\n    if( groups.length <= 0 ) {\n      return <Heading size={600}>No groups found, please create a new one.</Heading>\n    }\n    return groups.map((group, index) => {\n      return <GroupCard \n        key={index}\n        index={index}\n        group={group}\n      />\n    })\n  }\n\n  render () {\n    return <Pane \n    display=\"flex\" \n    flexDirection=\"column\" \n    justifyContent=\"center\" \n    alignItems=\"center\"\n    marginTop={20}>\n      {this.renderGroupsList()}\n    </Pane>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    groups: state.groups.groups,\n    groupListLoading: state.groups.groupListLoading,\n    containerListLoading: state.container.containerListLoading,\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    getGroups,\n    getContainers,\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( GroupsList )","import { store } from '../'\nimport { request } from '../../utilities/request'\n\nexport const genericStats = payload => ({\n  type: 'GENERIC_STATS',\n  payload\n})\n\nexport const getContainersStat = () => {\n  return dispatch => {\n    request('get', `container/stats`, {})\n      .then(response => {\n        dispatch(genericStats({ containerStats: response.data }))\n      }).catch(error => {\n        console.log(error)\n      })\n  }\n}\n\nexport const containerStatsProcess = () => {\n  if(!store.getState().stats.isLive) {\n    return dispatch => {\n      dispatch(getContainersStat())\n      dispatch(genericStats({ isLive: true }))\n      setInterval(() => {\n        dispatch(getContainersStat())\n      }, 4000)\n    }\n  } else {\n    return dispatch => {\n      dispatch(genericStats({ isLive: true }))\n    }\n  }\n}","import React from 'react'\nimport { Pane, Pre, SideSheet, Heading, Paragraph } from 'evergreen-ui'\n\nclass LogSideSheet extends React.PureComponent {\n\n  render() {\n    const { isShowingSideSheet, logData, resetLogSideSheet } = this.props\n    return <SideSheet\n                width={1000}\n                isShown={isShowingSideSheet}\n                onCloseComplete={resetLogSideSheet}\n                containerProps={{\n                display: 'flex',\n                flex: '1',\n                flexDirection: 'column',\n                }}\n            >\n                <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor=\"white\">\n                {logData && logData.container && \n                    <Pane padding={16}>\n                        <Heading size={600}>Container logs</Heading>                  \n                        <Paragraph size={400}>\n                            {`Container Name: ${logData.container.Name}`}\n                        </Paragraph>\n                    </Pane>\n                 }\n                 { !logData.container && \n                    <Pane padding={16}>\n                        <Heading size={600}>Prune response</Heading>                  \n                    </Pane>\n                 }\n                </Pane>\n                <Pane flex=\"1\" overflowY=\"scroll\" background=\"tint1\" padding={16}>\n                    <Pane>\n                      {logData && <Pre marginTop={0}>{logData.data}</Pre>}\n                    </Pane>\n                </Pane>\n            </SideSheet>\n  }\n}\n\nexport default  LogSideSheet ","import { request } from '../../utilities/request'\nimport { toaster } from 'evergreen-ui'\n\nexport const genericImage = payload => ({\n  type: 'GENERIC_IMAGE',\n  payload\n})\n\nexport const runImage = payload => ({\n  type: 'RUN_IMAGE',\n  payload\n})\n\nexport const removeImage = payload => ({\n  type: 'DELETE_IMAGE',\n  payload\n})\n\nexport const toggleModal = payload => ({\n  type: 'TOGGLE_IMAGE_MODAL',\n  payload\n})\n\nexport const getImages = () => {\n  return dispatch => {\n    dispatch(genericImage({\n      loading: true,\n      pageError: false,\n      activeIndex: 0,\n    }))\n    request('get', `image/fetch`)\n      .then(response => {\n        dispatch(genericImage({\n          loading: false,\n          images: response.data,\n          pageError: false,\n        }))\n      }).catch(error => {\n        dispatch(genericImage({\n          loading: false,\n          pageError: true,\n        }))\n      })\n  }\n}\n\nexport const runImageToContainer = (image) => {\n  return dispatch => {\n    dispatch(runImage({\n      imageId: image.ID,\n      data: { stateToggling: true },\n    }))\n    request('get', `image/command?image=${image.ID}&command=${'run'}`)\n      .then(res => {\n        dispatch(runImage({\n          imageId: image.ID,\n          data: { stateToggling: false },\n        }))\n        toaster.success(`Image ${image.ID} has been started running.`,{ duration: 5 })\n      })\n      .catch( ex => {\n        dispatch(runImage({\n          imageId: image.ID,\n          data: { stateToggling: false },\n        }))\n        toaster.warning(`There is problem running image ${image.ID}`,{duration: 5})\n      })\n  }\n}\n\n\nexport const deleteImage = (image, command) => (dispatch, getState)=>{\n    request('get', `image/command?image=${image.ID}&command=${command}`)\n      .then(res => {\n        dispatch(removeImage({\n          imageId: image.ID,\n          showModal: !getState().image.showModal,\n          selectedImage: {}\n        }))\n        toaster.success(\n          `Image ${image.ID} is no more!!!.`,\n          {\n            duration: 5\n          }\n        )\n      })\n      .catch(ex=>{\n        dispatch(removeImage({\n          showModal: !getState().image.showModal,\n          selectedImage: {}\n        }))\n        toaster.danger(\n          `Image ${image.ID} can not be deleted! May be used by some containers.`,\n          {\n            duration: 5\n          },\n        )\n      })\n}\n\nexport const toggleImageDeleteModal = (image) => (dispatch, getState)=>{\n  dispatch(toggleModal({\n    showModal: !getState().image.showModal,\n    selectedImage: image ? image : {}\n  }))\n}","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport './style/modal.css'\nimport { Pane, Button, Heading, Icon } from 'evergreen-ui'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { deleteContainer } from '../../store/actions/container.action'\nimport { deleteImage } from '../../store/actions/image.action'\n\nconst modalRoot = document.getElementById('modal-root')\n\n\nclass Modal extends Component {\n    constructor(props) {\n        super(props);\n        this.el = document.createElement('div');\n        this.handleDelete = this.handleDelete.bind(this)\n    }\n\n    componentDidMount() {\n        modalRoot.appendChild(this.el);\n    }\n\n    componentWillUnmount() {\n        modalRoot.removeChild(this.el);\n    }\n\n    handleDelete(){\n       if(this.props.container){\n         this.props.deleteContainer(this.props.container, 'rm')\n       } else {\n          console.log('else')\n         this.props.deleteImage(this.props.image, 'rm')\n       }\n    }\n\n    render() {\n      const { container, image } = this.props\n        return ReactDOM.createPortal(\n            <div className=\"modal\" id=\"deleteModal\">\n               <Pane \n                  display=\"flex\" \n                  flexDirection=\"column\" \n                  flexGrow={1}\n                  padding={12}\n                  borderRadius={6}\n                  border=\"default\"\n                  className=\"modal-pane\">\n                     <Pane display=\"flex\">\n                        <Pane flex={1} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                           <Heading size={400}>{`Are you sure to delete this ${container ? 'container' : 'image'}?`}</Heading>\n                        </Pane>\n                        <Pane>\n                           <Icon icon='cross' className='modal-close'\n                           onClick={this.props.toggleModal}/>\n                        </Pane>\n                     </Pane>\n                     <Pane display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                        <Heading size={600}>{container ? container.Name : image.ID}</Heading>\n                     </Pane>\n                     <Pane display=\"flex\" marginTop={10} justifyContent=\"center\" alignItems=\"center\">\n                        <Pane>\n                           <Button marginRight={10} height={22} onClick={this.props.toggleModal}>Cancel</Button>\n                           <Button  height={22} iconBefore=\"trash\" onClick={ this.handleDelete }>Delete</Button>\n                        </Pane>\n                     </Pane>\n               </Pane>\n            </div>,\n            this.el,\n        );\n    }\n}\n \nconst mapDispatchToProps = dispatch => bindActionCreators(\n   {\n      deleteContainer,\n      deleteImage\n   },\n   dispatch\n )\n\nexport default connect(null, mapDispatchToProps)(Modal)","import React from 'react'\n\nimport SecondaryNavBar from '../components/SecondaryNavBar'\nimport ContainerLists from '../components/container/lists'\nimport GroupsList from '../components/groups/GroupsList'\n\nimport {containerStatsProcess} from '../store/actions/stats.action'\n\nimport {store} from '../store'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { toggleDeleteModal, resetLogSideSheet } from '../store/actions/container.action'\nimport LogSideSheet from '../components/LogSideSheet'\nimport Modal from '../components/container/deleteModal'\n\nclass ContainerPage extends React.PureComponent {\n\n  componentDidMount () {\n    store.dispatch(containerStatsProcess())\n  }\n\n  render () {\n    const { showGroupsPage,showModal, selectedContainer, toggleDeleteModal, \n      resetLogSideSheet, isShowingSideSheet, logData } = this.props\n    return <>\n      <SecondaryNavBar />\n      <LogSideSheet resetLogSideSheet={resetLogSideSheet} isShowingSideSheet={isShowingSideSheet} logData={logData} />\n      { showModal && <Modal container={selectedContainer} toggleModal={toggleDeleteModal} />} \n      <div className=\"subnavaware-view\">\n        {\n          showGroupsPage\n            ? <GroupsList />\n            : <ContainerLists />\n        }\n      </div>\n    </>\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    showGroupsPage: state.groups.showGroupsPage,\n    showModal: state.container.showModal,\n    selectedContainer: state.container.selectedContainer,\n    isShowingSideSheet: state.container.isShowingSideSheet,\n    logData: state.container.logData\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    toggleDeleteModal,\n    resetLogSideSheet\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( ContainerPage )","import React from 'react'\nimport { Pane, Button, Heading, Badge, Spinner } from 'evergreen-ui'\nimport '../../components/container/style/card.css'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { genericImage, runImageToContainer, toggleImageDeleteModal } from '../../store/actions/image.action'\n\n\nclass ImageCard extends React.PureComponent {\n\n  render () {\n    const { image, activeIndex, genericImage, index, toggleImageDeleteModal, runImageToContainer } = this.props\n    const active = activeIndex == index\n   return <Pane \n            display=\"flex\" \n            flexDirection=\"column\" \n            flexGrow={1}\n            padding={12}\n            borderRadius={6}\n            border=\"default\"\n            className={active ? \"element-card card-active\" : \"element-card\"}\n            onMouseEnter={() => genericImage({\n            activeIndex: index\n            })}>\n            <Pane display=\"flex\">\n               <Pane display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                  <Heading size={400}>{`${image.Repository != '<none>'? image.Repository : 'No Repository'}: ${ image.Tag != '<none>' ? image.Tag : 'No Tag'}`}</Heading>\n               </Pane>\n               <Badge backgroundColor=\"#e7e9ef\" fontWeight=\"bold\" borderRadius={16} paddingLeft={10} fontSize={11} paddingRight={10} marginLeft={10} marginTop={3}>{image.ID}</Badge>\n               <Badge backgroundColor=\"#d4eee3\" fontWeight=\"bold\" borderRadius={16} paddingLeft={10} fontSize={11} paddingRight={10} marginLeft={10} marginTop={3}>{image.Size}</Badge>\n               <Badge backgroundColor=\"#deebf7\" fontWeight=\"bold\" borderRadius={16} paddingLeft={10} fontSize={11} paddingRight={10} marginLeft={10} marginTop={3}>{image.CreatedSince}</Badge>\n            </Pane>\n            { active && \n               <Pane display=\"flex\" marginTop={12}>\n                  <Button marginRight={5} \n                        height={22} \n                        iconBefore=\"application\"\n                        onClick={()=>{\n                          runImageToContainer(image)\n                        }}\n                        isLoading={image.stateToggling}\n                       >Run</Button>\n                  <Button marginRight={5} \n                        height={22} \n                        iconBefore=\"trash\" \n                        onClick={()=>{\n                          toggleImageDeleteModal(image)\n                        }}\n                        >\n                        Delete\n                  </Button>\n               </Pane>\n            }\n         </Pane>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    activeIndex: state.image.activeIndex,\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    genericImage,\n    toggleImageDeleteModal,\n    runImageToContainer\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( ImageCard )","import React from 'react'\nimport { Pane, Button, Heading, Badge, Spinner } from 'evergreen-ui'\nimport '../components/container/style/card.css'\nconst Loader = (props) => {\n    return (\n      <Pane \n      display=\"flex\" \n      flexDirection=\"column\" \n      justifyContent=\"center\" \n      alignItems=\"center\"\n      marginTop={20}>\n         <Heading>{props.spinner ? `Loading images. Please wait....` : `No image on this machine`}</Heading>\n         {props.spinner && <Spinner marginX=\"auto\" marginY={120}/>}\n      </Pane>\n    )\n};\n\nexport default Loader","import React from 'react'\nimport { Pane } from 'evergreen-ui'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { getImages, toggleImageDeleteModal } from '../../store/actions/image.action'\n\nimport ImageCard from './imageCard'\nimport Modal from '../container/deleteModal'\nimport Loader from '../Loader'\n\nclass ImageList extends React.PureComponent {\n\n  componentDidMount () {\n    this.props.getImages()\n  }\n\n  render () {\n    const { images, showModal, selectedImage, toggleImageDeleteModal, loading } = this.props\n    if(loading){\n      return <Loader spinner={true}/>\n    } else if(images.length == 0){\n      return <Loader/>\n    }\n    return <Pane \n      display=\"flex\" \n      flexDirection=\"column\" \n      justifyContent=\"center\" \n      alignItems=\"center\"\n      marginTop={20}>\n      \n      { showModal && <Modal image={selectedImage} toggleModal={toggleImageDeleteModal} />} \n        {\n          images.map((image, index) => \n            <ImageCard \n              key={index} \n              index={index} \n              image={image} \n            />\n          )\n        }\n    </Pane>\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    images: state.image.images,\n    showModal: state.image.showModal,\n    selectedImage: state.image.selectedImage,\n    loading: state.image.loading\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    getImages,\n    toggleImageDeleteModal\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( ImageList )","import React from 'react'\n\nimport SecondaryNavBar from '../components/SecondaryNavBar'\nimport ImageLists from '../components/image/imageLists'\n\nclass ImagePage extends React.PureComponent {\n\n  render () {\n    return <>\n      <ImageLists />\n    </>\n  }\n\n}\n\nexport default ImagePage","import { request } from '../../utilities/request'\nimport { toaster } from 'evergreen-ui'\n\nexport const setCleanUpSegment = payload => ({\n  type: 'SELECTED_SEGMENT',\n  payload\n})\n\nexport const executePrune = payload => ({\n  type: 'EXECUTE_PRUNE',\n  payload\n})\n\n\nexport const setSelectedCleanUpSegment = (value) => (dispatch, getState)=>{\n  dispatch(setCleanUpSegment({\n    segmentValue: value\n  }))\n}\n\n\nexport const pruneCommand = (type) => (dispatch, getState)=>{\n  dispatch(executePrune({\n    apiCallStarted: true,\n    responseData: {},\n    isShowingSideSheet:false,\n  }))\n  request('get', `cleanup/command?type=${type}`)\n    .then(res => {\n      dispatch(executePrune({\n        isShowingSideSheet: res.data ? true : false,\n        responseData: res.data,\n        apiCallStarted: false\n      }))\n      if(!res.data){\n        toaster.success(`${type} prune success`, {duration: 5})\n      }\n    }) \n    .catch(ex=>{\n      dispatch(executePrune({\n        responseData: {},\n        isShowingSideSheet:false,\n        apiCallStarted:false\n      }))\n    }) \n}\n\nexport const resetLogSideSheet = () => (dispatch, getState)=>{\n  dispatch(executePrune({\n    isShowingSideSheet: !getState().cleanup.isShowingSideSheet,\n    apiCallStarted: getState().cleanup.apiCallStarted\n  }))\n}","import React from 'react'\nimport { Pane, Spinner, SegmentedControl, Button } from 'evergreen-ui'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { setSelectedCleanUpSegment } from '../../store/actions/cleanUp.action'\n\n\nclass CleanUpNavBar extends React.PureComponent {\n\n   render() {\n      const {segmentOptions, selectedSegment, setSelectedCleanUpSegment} = this.props;\n      \n      return <Pane \n        backgroundColor=\"#f1f1f1\" \n        display=\"flex\" \n        justifyContent=\"center\"\n        padding={10}>\n        <SegmentedControl\n          width={600}\n          height={26}\n          options={segmentOptions}\n          value={selectedSegment.value}\n          onChange={value => {\n            setSelectedCleanUpSegment(value)\n          }}\n        />\n      </Pane>\n    }\n  }\n  \n  const mapStateToProps = state => {\n    return {\n      segmentOptions: state.cleanup.segmentOptions,\n      selectedSegment: state.cleanup.selectedSegment\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => bindActionCreators(\n    {\n      setSelectedCleanUpSegment\n    },\n    dispatch\n  )\n\nexport default connect(mapStateToProps, mapDispatchToProps)( CleanUpNavBar )","import React from 'react'\nimport { Pane, Button, Heading, Paragraph } from 'evergreen-ui'\n\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport '../container/style/card.css'\nimport { pruneCommand } from '../../store/actions/cleanUp.action'\n\nclass CleanUpInfo extends React.PureComponent {\n\n  render () {\n\n     const { selectedSegment, pruneCommand, apiCallStarted } = this.props\n     return <Pane \n               display=\"flex\" \n               flexDirection=\"column\" \n               justifyContent=\"center\" \n               alignItems=\"center\"\n               marginTop={20}>\n               <Pane \n                  display=\"flex\" \n                  flexDirection=\"column\" \n                  flexGrow={1}\n                  padding={12}\n                  borderRadius={6}\n                  border=\"default\"\n                  className={\"element-card card-active\" }\n                  >\n                  <Pane display=\"flex\">\n                     <Pane display=\"flex\" >\n                        <Heading>{`Prune Docker ${selectedSegment.value}s`}</Heading>\n                     </Pane>\n                  </Pane>\n                  <Pane display=\"flex\" marginTop={12}>\n                     <Paragraph>{selectedSegment.message} </Paragraph>\n                  </Pane>                 \n                  <Pane display=\"flex\" marginTop={12} >              \n                     <Button marginRight={5} \n                        height={22} \n                        iconBefore=\"trash\" \n                        intent=\"danger\"\n                        isLoading={apiCallStarted}\n                        onClick={()=>{\n                           pruneCommand(selectedSegment.value)\n                        }}\n                        >\n                        {`Proceed to Prune ${selectedSegment.value}`}\n                     </Button>\n                  </Pane>                    \n               </Pane>\n         </Pane>\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n      selectedSegment: state.cleanup.selectedSegment,\n      apiCallStarted: state.cleanup.apiCallStarted\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n   pruneCommand\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( CleanUpInfo )","import React from 'react'\n\nimport { bindActionCreators } from 'redux'\n\nimport CleanUpNavBar from '../components/cleanup/cleanupSubNav'\nimport CleanUpInfo from '../components/cleanup/cleanUpInfo'\nimport { resetLogSideSheet } from '../store/actions/cleanUp.action'\nimport LogSideSheet from '../components/LogSideSheet'\n\nimport { connect } from 'react-redux'\n\nclass CleanUpPage extends React.PureComponent {\n  render () {\n    const { resetLogSideSheet, isShowingSideSheet, logData } = this.props\n    return <>\n      <LogSideSheet resetLogSideSheet={resetLogSideSheet} isShowingSideSheet={isShowingSideSheet} logData={logData} />\n      <CleanUpNavBar />\n      <CleanUpInfo/>\n    </>\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isShowingSideSheet: state.cleanup.isShowingSideSheet,\n    logData: state.cleanup.responseData\n  }\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    resetLogSideSheet\n  },\n  dispatch\n)\n\nexport default connect(mapStateToProps, mapDispatchToProps)( CleanUpPage )","import React from 'react'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Navbar from './components/NavBar'\n\nimport ContainerPage from './pages/container.page'\nimport ImagePage from './pages/image.page'\nimport CleanupPage from './pages/cleanup.page'\n\nconst Routes = () => {\n    return (\n        <React.Fragment>\n            <BrowserRouter>\n               <Navbar/>\n                <Switch>\n                    <Route path=\"/\" exact component={ContainerPage}/>\n                    <Route path=\"/containers\" exact component={ContainerPage}/>\n                    <Route path=\"/images\" component={ImagePage}/>\n                    <Route path=\"/cleanup\" component={CleanupPage}/>\n                </Switch>\n            </BrowserRouter>\n        </React.Fragment>\n    )\n}\n\nexport default Routes","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nimport { Provider } from 'react-redux'\nimport Routes from './routes'\nimport { store } from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <Routes />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}